TFS является централизованной системой контроля версий (против децентрализованного Git), при развёрнутом Team Foundation Server. Для хранения информации используется база данных MS SQL, где на каждую коллекцию создаётся своя БД. При работе с репозиторием используется утилита tf. При процедуре check-out указывается адрес коллекции и репозитория, который "мапится" на локальный компьютер (при этом в директории не создаются мета папки типа .git, а контроль workspace'ов осуществляется по всему компьютеру. Поэтому нет возможности легко переместить скачанный репозитории в другое место). В TFS есть возможность скачать только один файл или одну папку из репозитория, нет необходимости качать всю ветку, как в Git. При отключённом сервере среда Visual Studio не отслеживает изменения а работает в фоновом режиме, а при нахождении сервера предложит вернуться в режим онлайн, просчитав изменения. Конфликты в TFS решаются по большей мере автоматически (гораздо более гибкий контроль изменений чем в Git, где строка считается удалённой и вставленной новой при изменении одной буквы или отступа). На одном сервере может находиться несколько коллекций, в которые вложены проекты, в которые вложены непосредственно файлы (проект так же может быть разделён на ветви) (в Git иерархия выглядит как Репозитории/ветки/данные). TFS так же как и Git поддерживает ветвление (branches). Последние версии TFS поддерживают Git репозитории, хотя средства управления ими являются не очень удобными (например, если в одной коллекции есть TFS и Git проекты, я не увижу их в списке Source Control'а), соответственно юзабилити TFS Git оставляет желать лучшего. Скорее всего это просто надстройка на TFS. В TFS есть многоуровневая поддержка уровней доступа (на уровне коллекций, проектов, ветвей, билдов), в Git уровни доступа зависят от конкретного серверного ПО, чаще всего используются SSH ключи (определяющие пользователя+компьютер), это является кроссплатформенным решением. В TFS встроена поддержка continious integration, контролирующая тестирование и построение новых версий, в Git такого акцента не сделано, скорее всего потому что области применения Git VCS гораздо шире (да и почти все системы автоматического построения поддерживают Git). 